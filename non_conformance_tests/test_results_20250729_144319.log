HTTP/3 Non-Conformance Test Results
==================================================
Test Run: 2025-07-29 14:47:01
Total Tests: 48
Passed: 48
Failed: 0


============================================================
TEST CASE #1: test_priority_update_first_frame.py
============================================================
Status: PASSED
Execution Time: 3.25s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #1
======================================================================
📋 Test: PRIORITY_UPDATE frame before SETTINGS frame
🚫 Violation: RFC 9114 Section 6.2.1 - SETTINGS must be first frame on control stream
📚 RFC Section: RFC 9114 Section 6.2.1
🎯 Target: localhost:4433
======================================================================
📍 Creating control stream
📍 Sending PRIORITY_UPDATE as FIRST frame
🚫 PROTOCOL VIOLATION: SETTINGS frame should be first!
✅ PRIORITY_UPDATE sent on stream 14
📍 Creating QPACK streams
📍 Sending HTTP request
✅ HTTP request sent on stream 0
📍 Sending SETTINGS frame (late)
🚫 STILL NON-CONFORMANT: Should have been first frame
✅ SETTINGS frame sent (but violates 'first frame' requirement)

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #1 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Priority Update Sent
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Request Sent
   ✅ PASS Settings Sent Late

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • PRIORITY_UPDATE was sent as first frame (protocol violation)
   • SETTINGS frame was sent later (still non-conformant)
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 7/7 steps passed in 3.03s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #3: test_multiple_requests_same_stream.py
============================================================
Status: PASSED
Execution Time: 3.66s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #3
======================================================================
📋 Test: Multiple requests on same stream
🚫 Violation: RFC 9114 Section 4.1 - Client must send only single request per stream
📚 RFC Section: RFC 9114 Section 4.1
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending first request (conformant)
✅ First HEADERS frame sent on stream 0
   └─ Method: GET, Path: /first-request (conformant)
📍 Sending second request on SAME stream
🚫 PROTOCOL VIOLATION: Multiple requests on same stream!
🚫 RFC 9114 Section 4.1: Client MUST send only single request per stream
✅ Second HEADERS frame sent on stream 0
   └─ Method: POST, Path: /second-request (VIOLATION!)
📍 Sending POST data for second request
⚠️  POST data failed: DATA frame is not allowed in this state (may be expected due to connection state)

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #3 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS First Request Sent
   ✅ PASS Second Request Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • POST data failed: DATA frame is not allowed in this state
   • First request sent normally (conformant)
   • Second request sent on same stream (protocol violation)
   • RFC 9114 Section 4.1 violation demonstrated
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.03s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #5: test_data_frame_before_headers.py
============================================================
Status: PASSED
Execution Time: 3.24s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #5
======================================================================
📋 Test: DATA frame before HEADERS frame
🚫 Violation: Invalid frame sequence - DATA before HEADERS triggers H3_FRAME_UNEXPECTED
📚 RFC Section: HTTP/3 Frame Sequencing
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending DATA frame WITHOUT HEADERS first
🚫 PROTOCOL VIOLATION: DATA frame before HEADERS is invalid!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
❌ Failed to send DATA frame: DATA frame is not allowed in this state
   └─ This may indicate the violation was caught early

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #5 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Data Frame Sent First

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • DATA frame sending failed: DATA frame is not allowed in this state
   • DATA frame sent before any HEADERS frame (protocol violation)
   • Invalid frame sequence should trigger H3_FRAME_UNEXPECTED
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #7: test_data_frame_after_trailing_headers.py
============================================================
Status: PASSED
Execution Time: 3.24s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #7
======================================================================
📋 Test: DATA frame after trailing HEADERS frame
🚫 Violation: Invalid frame sequence - DATA after trailing HEADERS triggers H3_FRAME_UNEXPECTED
📚 RFC Section: HTTP/3 Frame Sequencing Rules
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending initial HEADERS frame
✅ Initial HEADERS frame sent on stream 0
   └─ Headers: 6 header fields
📍 Sending trailing HEADERS frame (closes stream)
✅ Trailing HEADERS frame sent with end_stream=True
   └─ This should close the request stream
   └─ No more frames should be sent on this stream
📍 Sending DATA frame AFTER trailing HEADERS
🚫 PROTOCOL VIOLATION: DATA frame after trailing HEADERS is invalid!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
❌ Failed to send DATA frame: DATA frame is not allowed in this state
   └─ This may indicate the violation was caught early

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #7 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Initial Headers Sent
   ✅ PASS Trailing Headers Sent
   ✅ PASS Data After Trailing Headers Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • DATA frame sending failed: DATA frame is not allowed in this state
   • DATA frame sent after trailing HEADERS with end_stream=True (protocol violation)
   • Invalid frame sequence should trigger H3_FRAME_UNEXPECTED
   • Stream should have been closed by trailing HEADERS frame
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 7/7 steps passed in 3.03s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #10: test_transfer_encoding_header.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #10
======================================================================
📋 Test: Transfer-Encoding header in HTTP/3 request
🚫 Violation: Transfer-Encoding header MUST NOT be used in HTTP/3
📚 RFC Section: HTTP/3 Header Field Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with Transfer-Encoding: chunked
🚫 PROTOCOL VIOLATION: Transfer-Encoding header MUST NOT be used in HTTP/3!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with Transfer-Encoding sent on stream 0
   └─ Headers: 8 header fields
   └─ This violates HTTP/3 transfer coding restrictions!
📍 Sending DATA frame with request body
✅ DATA frame sent on stream 0
   └─ Payload: 71 bytes

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #10 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Transfer Encoding Headers Sent
   ✅ PASS Request Body Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Request sent with Transfer-Encoding: chunked header (protocol violation)
   • Transfer codings are not defined for HTTP/3
   • Transfer-Encoding header field MUST NOT be used by client
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #12: test_uppercase_header_names.py
============================================================
Status: PASSED
Execution Time: 3.24s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #12
======================================================================
📋 Test: Uppercase header field names
🚫 Violation: Header field names MUST be lowercase in HTTP/3
📚 RFC Section: HTTP/3 Header Field Encoding
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with uppercase header field names
🚫 PROTOCOL VIOLATION: Header field names MUST be lowercase in HTTP/3!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with uppercase field names sent on stream 0
   └─ Headers: 10 header fields
   └─ Uppercase headers: Content-Type, User-Agent, Accept, etc.
   └─ This violates HTTP/3 lowercase header requirement!
📍 Sending DATA frame with request body
✅ DATA frame sent on stream 0
   └─ Payload: 65 bytes

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #12 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Uppercase Headers Sent
   ✅ PASS Request Body Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Request sent with uppercase header field names (protocol violation)
   • Header field names MUST be lowercase prior to encoding in HTTP/3
   • Uppercase headers: Content-Type, User-Agent, Accept, X-Test-Case, Authorization, Cache-Control
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #14: test_connection_header_fields.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #14
======================================================================
📋 Test: Connection-specific header fields
🚫 Violation: Connection-specific fields MUST NOT be used in HTTP/3
📚 RFC Section: HTTP/3 Header Field Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with connection-specific header fields
🚫 PROTOCOL VIOLATION: Connection-specific fields MUST NOT be used in HTTP/3!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with connection-specific fields sent on stream 0
   └─ Headers: 11 header fields
   └─ Forbidden headers: Connection, Upgrade, Proxy-Connection, Keep-Alive, TE
   └─ This violates HTTP/3 connection-specific field restrictions!
📍 Sending DATA frame with request body
✅ DATA frame sent on stream 0
   └─ Payload: 74 bytes

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #14 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Connection Headers Sent
   ✅ PASS Request Body Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Request sent with connection-specific header fields (protocol violation)
   • HTTP/3 field section MUST NOT contain connection-specific fields
   • Forbidden headers: Connection, Upgrade, Proxy-Connection, Keep-Alive, TE
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #16: test_undefined_pseudo_headers.py
============================================================
Status: PASSED
Execution Time: 3.23s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #16
======================================================================
📋 Test: Undefined pseudo-header fields
🚫 Violation: Undefined pseudo-headers MUST NOT be generated by client
📚 RFC Section: HTTP/3 Pseudo-Header Field Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with undefined pseudo-header fields
🚫 PROTOCOL VIOLATION: Undefined pseudo-headers MUST NOT be generated!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with undefined pseudo-headers sent on stream 0
   └─ Headers: 12 header fields
   └─ Undefined pseudo-headers: :foo, :custom-header, :version, :protocol, :status, :encoding
   └─ This violates HTTP/3 pseudo-header field restrictions!
📍 Sending DATA frame with request body
✅ DATA frame sent on stream 0
   └─ Payload: 67 bytes

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #16 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Undefined Pseudo Headers Sent
   ✅ PASS Request Body Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Request sent with undefined pseudo-header fields (protocol violation)
   • Client MUST NOT generate pseudo-headers other than :method, :path, :scheme, :authority
   • Undefined pseudo-headers: :foo, :custom-header, :version, :protocol, :status, :encoding
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #18: test_request_pseudoheaders_in_response.py
============================================================
Status: PASSED
Execution Time: 8.23s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #18
======================================================================
📋 Test: Request pseudo-headers in server response
🚫 Violation: Server MUST NOT include request pseudo-headers in responses
📚 RFC Section: HTTP/3 Response Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending request that might trigger pseudo-header echoing
🔍 Testing if server incorrectly includes request pseudo-headers in response
🚫 Server violation: Including :method, :path in response headers
✅ Echo test HEADERS frame sent on stream 0
   └─ Headers: 10 header fields
   └─ Testing server response header validation
📍 Sending request body
✅ Request body sent on stream 0
   └─ Payload: 36 bytes
📍 Monitoring for server response behavior
🔍 Checking if server incorrectly includes request pseudo-headers
   Expected: Response should only contain :status pseudo-header
   Violation: Response containing :method, :path, :scheme, :authority

📍 Extended response observation (5.0s)
🔍 Note: This test requires manual response analysis
   └─ Check server logs for response header violations
   └─ Verify responses don't contain request pseudo-headers
   └─ Valid response pseudo-headers: only :status

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #18 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Echo Test Headers Sent
   ✅ PASS Request Body Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed
   • Testing for server-side violation: request pseudo-headers in response
   • Compliant response should only contain :status pseudo-header
   • Violation: Response containing :method, :path, :scheme, :authority
   • Monitor server logs/responses for improper pseudo-header echoing

📊 Summary: 6/6 steps passed in 8.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #19: test_response_pseudoheaders_in_request.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #19
======================================================================
📋 Test: Response pseudo-headers in client request
🚫 Violation: Response pseudo-headers MUST NOT appear in requests
📚 RFC Section: HTTP/3 Request Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with response pseudo-header fields
🚫 PROTOCOL VIOLATION: Response pseudo-headers MUST NOT appear in requests!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with response pseudo-headers sent on stream 0
   └─ Headers: 8 header fields
   └─ Forbidden response pseudo-header: :status
   └─ This violates HTTP/3 request pseudo-header restrictions!
📍 Sending DATA frame with request body
✅ DATA frame sent on stream 0
   └─ Payload: 77 bytes

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #19 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Response Pseudo Headers Sent
   ✅ PASS Request Body Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Request sent with response pseudo-header :status (protocol violation)
   • Response pseudo-headers MUST NOT appear in requests
   • Valid request pseudo-headers: :method, :path, :scheme, :authority only
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #20: test_pseudoheaders_in_trailers.py
============================================================
Status: PASSED
Execution Time: 3.23s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #20
======================================================================
📋 Test: Pseudo-headers in trailing HEADERS frame
🚫 Violation: Pseudo-headers MUST NOT appear in trailer sections
📚 RFC Section: HTTP/3 Trailer Field Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending initial HEADERS frame
✅ Initial HEADERS frame sent on stream 0
   └─ Headers: 8 header fields
📍 Sending DATA frame with request body
✅ DATA frame sent on stream 0
   └─ Payload: 72 bytes
📍 Sending trailing HEADERS frame with pseudo-headers
🚫 PROTOCOL VIOLATION: Pseudo-headers MUST NOT appear in trailer sections!
🚫 Expected error: Connection termination or header rejection
✅ Trailing HEADERS frame with pseudo-headers sent on stream 0
   └─ Trailers: 7 header fields
   └─ Forbidden pseudo-headers: :path, :method, :status, :scheme
   └─ This violates HTTP/3 trailer field restrictions!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #20 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Initial Headers Sent
   ✅ PASS Request Body Sent
   ✅ PASS Pseudo Trailers Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Trailing HEADERS frame sent with pseudo-headers (protocol violation)
   • Pseudo-headers MUST NOT appear in trailer sections
   • Forbidden pseudo-headers in trailers: :path, :method, :status, :scheme
   • Valid trailers should only contain regular header fields
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 7/7 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #22: test_incorrect_header_ordering.py
============================================================
Status: PASSED
Execution Time: 3.23s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #22
======================================================================
📋 Test: Incorrect header ordering
🚫 Violation: Pseudo-headers MUST appear before regular headers in requests
📚 RFC Section: HTTP/3 Header Field Ordering Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with incorrect header ordering
🚫 PROTOCOL VIOLATION: Regular headers appear before pseudo-headers!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with incorrect ordering sent on stream 0
   └─ Headers: 11 header fields
   └─ Order: Regular headers first, then pseudo-headers
   └─ This violates HTTP/3 header ordering requirements!
📍 Sending DATA frame with request body
❌ Failed to send DATA frame: DATA frame is not allowed in this state

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #22 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Incorrect Header Ordering Sent
   ❌ FAIL Request Body Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • DATA frame sending failed: DATA frame is not allowed in this state
   • HEADERS frame sent with incorrect ordering (protocol violation)
   • Regular headers appeared before pseudo-headers
   • Pseudo-headers MUST appear before regular headers in requests
   • Correct order: :method, :path, :scheme, :authority, then regular headers
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/6 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #24: test_authority_with_userinfo.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #24
======================================================================
📋 Test: :authority with userinfo component
🚫 Violation: :authority MUST NOT include userinfo for http/https URIs
📚 RFC Section: HTTP/3 Authority Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with :authority containing userinfo
🚫 PROTOCOL VIOLATION: :authority MUST NOT include userinfo for http/https!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with userinfo in :authority sent on stream 0
   └─ Headers: 7 header fields
   └─ :authority contains: testuser:testpass@test-server:443
   └─ This violates HTTP/3 authority field restrictions!
📍 Sending second request with different userinfo format
✅ Second HEADERS frame with username-only userinfo sent on stream 4
   └─ :authority contains: admin@test-server
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #24 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Authority With Userinfo Sent
   ✅ PASS Authority With Username Only Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with userinfo in :authority pseudo-header (protocol violation)
   • :authority MUST NOT include deprecated userinfo for http/https URIs
   • Tested formats: user:password@host and user@host
   • Valid :authority should only contain host[:port]
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 8/8 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #25: test_empty_path_pseudoheader.py
============================================================
Status: PASSED
Execution Time: 3.21s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #25
======================================================================
📋 Test: Empty :path pseudo-header field
🚫 Violation: :path MUST NOT be empty for http/https URIs
📚 RFC Section: HTTP/3 Path Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with empty :path pseudo-header
🚫 PROTOCOL VIOLATION: :path MUST NOT be empty for http/https URIs!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with empty :path sent on stream 0
   └─ Headers: 7 header fields
   └─ :path value: '' (empty string)
   └─ This violates HTTP/3 path field requirements!
📍 Sending second request without :path pseudo-header
✅ Second HEADERS frame without :path sent on stream 4
   └─ :path pseudo-header completely missing
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #25 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Empty Path Sent
   ✅ PASS Missing Path Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with empty/missing :path pseudo-header (protocol violation)
   • :path MUST NOT be empty for http/https URIs
   • URIs without path component MUST use :path value of '/'
   • Tested both empty string and missing :path pseudo-header
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 8/8 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #26: test_missing_method_pseudoheader.py
============================================================
Status: PASSED
Execution Time: 3.32s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #26
======================================================================
📋 Test: Missing :method pseudo-header field
🚫 Violation: :method pseudo-header MUST be present in all HTTP/3 requests
📚 RFC Section: HTTP/3 Request Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame without :method pseudo-header
🚫 PROTOCOL VIOLATION: :method pseudo-header MUST be present in HTTP/3 requests!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame without :method sent on stream 0
   └─ Headers: 6 header fields
   └─ Missing required :method pseudo-header
   └─ This violates HTTP/3 request requirements!
📍 Sending second request with empty :method pseudo-header
✅ Second HEADERS frame with empty :method sent on stream 4
   └─ :method value: '' (empty string)
📍 Sending third request with duplicate :method pseudo-headers
✅ Third HEADERS frame with duplicate :method sent on stream 8
   └─ Duplicate :method values: GET and POST
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #26 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Missing Method Headers Sent
   ✅ PASS Empty Method Headers Sent
   ✅ PASS Duplicate Method Headers Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with missing/invalid :method pseudo-header (protocol violation)
   • All HTTP/3 requests MUST include exactly one :method pseudo-header
   • Tested missing :method, empty :method, and duplicate :method
   • Exception: CONNECT requests may omit :method (not tested here)
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 10/10 steps passed in 3.03s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #27: test_missing_scheme_pseudoheader.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #27
======================================================================
📋 Test: Missing :scheme pseudo-header field
🚫 Violation: :scheme pseudo-header MUST be present in all HTTP/3 requests
📚 RFC Section: HTTP/3 Request Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame without :scheme pseudo-header
🚫 PROTOCOL VIOLATION: :scheme pseudo-header MUST be present in HTTP/3 requests!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame without :scheme sent on stream 0
   └─ Headers: 6 header fields
   └─ Missing required :scheme pseudo-header
   └─ This violates HTTP/3 request requirements!
📍 Sending second request with empty :scheme pseudo-header
✅ Second HEADERS frame with empty :scheme sent on stream 4
   └─ :scheme value: '' (empty string)
📍 Sending third request with duplicate :scheme pseudo-headers
✅ Third HEADERS frame with duplicate :scheme sent on stream 8
   └─ Duplicate :scheme values: https and http
📍 Sending fourth request with invalid :scheme pseudo-header
✅ Fourth HEADERS frame with invalid :scheme sent on stream 12
   └─ Invalid :scheme value: ftp (should be http or https)
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #27 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Missing Scheme Headers Sent
   ✅ PASS Empty Scheme Headers Sent
   ✅ PASS Duplicate Scheme Headers Sent
   ✅ PASS Invalid Scheme Headers Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with missing/invalid :scheme pseudo-header (protocol violation)
   • All HTTP/3 requests MUST include exactly one :scheme pseudo-header
   • Tested missing :scheme, empty :scheme, duplicate :scheme, and invalid :scheme
   • Valid schemes for HTTP/3: http, https
   • Exception: CONNECT requests may omit :scheme (not tested here)
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 12/12 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #28: test_missing_path_pseudoheader.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #28
======================================================================
📋 Test: Missing :path pseudo-header field
🚫 Violation: :path pseudo-header MUST be present in all HTTP/3 requests
📚 RFC Section: HTTP/3 Request Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame without :path pseudo-header
🚫 PROTOCOL VIOLATION: :path pseudo-header MUST be present in HTTP/3 requests!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame without :path sent on stream 0
   └─ Headers: 6 header fields
   └─ Missing required :path pseudo-header
   └─ This violates HTTP/3 request requirements!
📍 Sending second request with duplicate :path pseudo-headers
✅ Second HEADERS frame with duplicate :path sent on stream 4
   └─ Duplicate :path values: /test-duplicate-path-1 and /test-duplicate-path-2
📍 Sending third request with malformed :path pseudo-header
✅ Third HEADERS frame with malformed :path sent on stream 8
   └─ Malformed :path value: '/test path with spaces' (contains unencoded spaces)
📍 Sending fourth request with :path containing control characters
✅ Fourth HEADERS frame with control characters in :path sent on stream 12
   └─ :path contains control characters: \x00\x01\x02
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #28 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Missing Path Headers Sent
   ✅ PASS Duplicate Path Headers Sent
   ✅ PASS Malformed Path Headers Sent
   ✅ PASS Control Char Path Headers Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with missing/invalid :path pseudo-header (protocol violation)
   • All HTTP/3 requests MUST include exactly one :path pseudo-header
   • Tested missing :path, duplicate :path, malformed :path, and :path with control chars
   • Valid :path must be properly encoded URI path component
   • Exception: CONNECT requests may omit :path (not tested here)
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 12/12 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #29: test_missing_authority_and_host.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #29
======================================================================
📋 Test: Missing :authority and Host headers
🚫 Violation: HTTPS requests MUST contain either :authority or Host header
📚 RFC Section: HTTP/3 Authority Component Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HTTPS request without :authority or Host header
🚫 PROTOCOL VIOLATION: HTTPS requests MUST contain either :authority or Host!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame without :authority or Host sent on stream 0
   └─ Headers: 6 header fields
   └─ Missing both :authority pseudo-header and Host header
   └─ This violates HTTP/3 authority requirements for HTTPS!
📍 Sending second request with HTTP scheme without authority
✅ Second HEADERS frame (HTTP) without authority sent on stream 4
   └─ HTTP scheme also requires authority component
📍 Sending third request with empty :authority pseudo-header
✅ Third HEADERS frame with empty :authority sent on stream 8
   └─ :authority value: '' (empty string)
📍 Sending fourth request with empty Host header
✅ Fourth HEADERS frame with empty Host header sent on stream 12
   └─ Host header value: '' (empty string)
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #29 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Missing Authority And Host Sent
   ✅ PASS Http Missing Authority Sent
   ✅ PASS Empty Authority Sent
   ✅ PASS Empty Host Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent without required authority component (protocol violation)
   • HTTP/HTTPS schemes MUST contain either :authority or Host header
   • Tested missing both, empty :authority, and empty Host header
   • Authority component identifies the target server for the request
   • Valid authority: :authority pseudo-header OR Host header (but not both empty)
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 12/12 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #30: test_empty_authority_pseudoheader.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #30
======================================================================
📋 Test: Empty :authority pseudo-header field
🚫 Violation: :authority pseudo-header MUST NOT be empty when present
📚 RFC Section: HTTP/3 Authority Pseudo-Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with empty :authority pseudo-header
🚫 PROTOCOL VIOLATION: :authority pseudo-header MUST NOT be empty when present!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with empty :authority sent on stream 0
   └─ Headers: 7 header fields
   └─ :authority value: '' (empty string)
   └─ This violates HTTP/3 authority requirements!
📍 Sending second request with whitespace-only :authority
✅ Second HEADERS frame with whitespace :authority sent on stream 4
   └─ :authority value: '   ' (whitespace only)
📍 Sending third request with duplicate :authority pseudo-headers
✅ Third HEADERS frame with duplicate :authority sent on stream 8
   └─ First :authority: '' (empty), Second :authority: 'test-server'
📍 Sending fourth request with invalid characters in :authority
✅ Fourth HEADERS frame with invalid :authority chars sent on stream 12
   └─ :authority contains control characters: \x00 and \x01
📍 Sending fifth request with malformed :authority (invalid port)
✅ Fifth HEADERS frame with malformed :authority port sent on stream 16
   └─ :authority port: 99999 (exceeds valid range)
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12
✅ Fifth DATA frame sent on stream 16

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #30 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Empty Authority Sent
   ✅ PASS Whitespace Authority Sent
   ✅ PASS Duplicate Authority Sent
   ✅ PASS Invalid Authority Chars Sent
   ✅ PASS Malformed Authority Port Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent
   ✅ PASS Request Body 5 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with invalid :authority pseudo-header values (protocol violation)
   • :authority pseudo-header MUST NOT be empty when present
   • Tested empty, whitespace, duplicate, invalid chars, and malformed port
   • Valid :authority format: host[:port] with proper encoding
   • Empty :authority is worse than missing :authority entirely
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 14/14 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #31: test_empty_host_header.py
============================================================
Status: PASSED
Execution Time: 3.20s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #31
======================================================================
📋 Test: Empty Host header field
🚫 Violation: Host header MUST NOT be empty when present
📚 RFC Section: HTTP/3 Host Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with empty Host header
🚫 PROTOCOL VIOLATION: Host header MUST NOT be empty when present!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with empty Host header sent on stream 0
   └─ Headers: 7 header fields
   └─ Host header value: '' (empty string)
   └─ This violates HTTP/3 Host header requirements!
📍 Sending second request with whitespace-only Host header
✅ Second HEADERS frame with whitespace Host header sent on stream 4
   └─ Host header value: '   ' (whitespace only)
📍 Sending third request with duplicate Host headers
✅ Third HEADERS frame with duplicate Host headers sent on stream 8
   └─ First Host: '' (empty), Second Host: 'test-server'
📍 Sending fourth request with invalid characters in Host header
✅ Fourth HEADERS frame with invalid Host header chars sent on stream 12
   └─ Host header contains control characters: \x00 and \x01
📍 Sending fifth request with conflicting :authority and Host headers
✅ Fifth HEADERS frame with conflicting authority/host sent on stream 16
   └─ :authority: 'authority-server', Host: '' (empty)
📍 Sending sixth request with malformed Host header (invalid port)
✅ Sixth HEADERS frame with malformed Host header port sent on stream 20
   └─ Host header port: 99999 (exceeds valid range)
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12
✅ Fifth DATA frame sent on stream 16
✅ Sixth DATA frame sent on stream 20

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #31 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Empty Host Sent
   ✅ PASS Whitespace Host Sent
   ✅ PASS Duplicate Host Sent
   ✅ PASS Invalid Host Chars Sent
   ✅ PASS Conflicting Authority Host Sent
   ✅ PASS Malformed Host Port Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent
   ✅ PASS Request Body 5 Sent
   ✅ PASS Request Body 6 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with invalid Host header values (protocol violation)
   • Host header MUST NOT be empty when present
   • Tested empty, whitespace, duplicate, invalid chars, conflicting, and malformed port
   • Valid Host header format: host[:port] with proper encoding
   • Host header serves same purpose as :authority pseudo-header
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 16/16 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #32: test_conflicting_authority_host.py
============================================================
Status: PASSED
Execution Time: 3.23s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #32
======================================================================
📋 Test: Conflicting :authority and Host headers
🚫 Violation: Host and :authority MUST contain the same value when both present
📚 RFC Section: HTTP/3 Authority Component Consistency Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with conflicting :authority and Host headers
🚫 PROTOCOL VIOLATION: Host and :authority MUST contain the same value!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with conflicting authority/host sent on stream 0
   └─ Headers: 8 header fields
   └─ :authority: 'authority-server.com'
   └─ Host: 'host-server.com'
   └─ This violates HTTP/3 authority consistency requirements!
📍 Sending second request with port mismatches
✅ Second HEADERS frame with port mismatch sent on stream 4
   └─ :authority: 'test-server.com:443'
   └─ Host: 'test-server.com:8443'
📍 Sending third request with case differences
✅ Third HEADERS frame with case mismatch sent on stream 8
   └─ :authority: 'test-server.com'
   └─ Host: 'TEST-SERVER.COM'
📍 Sending fourth request with subtle differences (trailing dot)
✅ Fourth HEADERS frame with subtle differences sent on stream 12
   └─ :authority: 'test-server.com'
   └─ Host: 'test-server.com.'
📍 Sending fifth request with IPv6 vs hostname mismatch
✅ Fifth HEADERS frame with IPv6/hostname mismatch sent on stream 16
   └─ :authority: '[::1]:443'
   └─ Host: 'localhost:443'
📍 Sending sixth request with implicit vs explicit port
✅ Sixth HEADERS frame with implicit/explicit port sent on stream 20
   └─ :authority: 'test-server.com' (implicit port 443)
   └─ Host: 'test-server.com:443' (explicit port 443)
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12
✅ Fifth DATA frame sent on stream 16
✅ Sixth DATA frame sent on stream 20

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #32 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Conflicting Authority Host Sent
   ✅ PASS Port Mismatch Sent
   ✅ PASS Case Mismatch Sent
   ✅ PASS Subtle Differences Sent
   ✅ PASS Ipv6 Hostname Mismatch Sent
   ✅ PASS Implicit Explicit Port Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent
   ✅ PASS Request Body 5 Sent
   ✅ PASS Request Body 6 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with conflicting Host and :authority values (protocol violation)
   • Host and :authority MUST contain the same value when both present
   • Tested hostname, port, case, subtle, IPv6/hostname, and implicit/explicit port mismatches
   • Authority consistency is critical for HTTP/3 request routing
   • Implementations should normalize and compare authority values consistently
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 16/16 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #33: test_authority_with_non_authority_scheme.py
============================================================
Status: PASSED
Execution Time: 3.24s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #33
======================================================================
📋 Test: Authority with non-authority scheme
🚫 Violation: Non-authority schemes MUST NOT contain :authority pseudo-header
📚 RFC Section: HTTP/3 Scheme-Specific Authority Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with mailto scheme and :authority
🚫 PROTOCOL VIOLATION: Non-authority schemes MUST NOT contain :authority!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with mailto + :authority sent on stream 0
   └─ Headers: 7 header fields
   └─ :scheme: 'mailto' (no authority component)
   └─ :authority: 'mail-server.com' (forbidden)
   └─ This violates HTTP/3 scheme-authority requirements!
📍 Sending second request with file scheme and :authority
✅ Second HEADERS frame with file + :authority sent on stream 4
   └─ :scheme: 'file' (no authority component)
   └─ :authority: 'localhost' (forbidden)
📍 Sending third request with data scheme and :authority
✅ Third HEADERS frame with data + :authority sent on stream 8
   └─ :scheme: 'data' (no authority component)
   └─ :authority: 'data-server.com' (forbidden)
📍 Sending fourth request with tel scheme and :authority
✅ Fourth HEADERS frame with tel + :authority sent on stream 12
   └─ :scheme: 'tel' (no authority component)
   └─ :authority: 'telecom-provider.com' (forbidden)
📍 Sending fifth request with urn scheme and :authority
✅ Fifth HEADERS frame with urn + :authority sent on stream 16
   └─ :scheme: 'urn' (no authority component)
   └─ :authority: 'urn-resolver.org' (forbidden)
📍 Sending sixth request with mailto scheme and empty :authority
✅ Sixth HEADERS frame with mailto + empty :authority sent on stream 20
   └─ :scheme: 'mailto' (no authority component)
   └─ :authority: '' (empty and forbidden)
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12
✅ Fifth DATA frame sent on stream 16
✅ Sixth DATA frame sent on stream 20

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #33 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Mailto With Authority Sent
   ✅ PASS File With Authority Sent
   ✅ PASS Data With Authority Sent
   ✅ PASS Tel With Authority Sent
   ✅ PASS Urn With Authority Sent
   ✅ PASS Empty Authority Non Authority Scheme Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent
   ✅ PASS Request Body 5 Sent
   ✅ PASS Request Body 6 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with :authority for non-authority schemes (protocol violation)
   • Non-authority schemes MUST NOT contain :authority pseudo-header
   • Tested schemes: mailto, file, data, tel, urn (all non-authority)
   • Authority schemes (http/https) require authority; non-authority schemes forbid it
   • Scheme-authority consistency is critical for proper URI semantics
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 16/16 steps passed in 3.03s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #34: test_host_header_with_non_authority_scheme.py
============================================================
Status: PASSED
Execution Time: 3.25s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #34
======================================================================
📋 Test: Host header with non-authority scheme
🚫 Violation: Non-authority schemes MUST NOT contain Host header field
📚 RFC Section: HTTP/3 Scheme-Specific Host Header Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with mailto scheme and Host header
🚫 PROTOCOL VIOLATION: Non-authority schemes MUST NOT contain Host header!
🚫 Expected error: Connection termination or header rejection
✅ HEADERS frame with mailto + Host sent on stream 0
   └─ Headers: 7 header fields
   └─ :scheme: 'mailto' (no authority component)
   └─ Host: 'mail-server.com' (forbidden)
   └─ This violates HTTP/3 scheme-host requirements!
📍 Sending second request with file scheme and Host header
✅ Second HEADERS frame with file + Host sent on stream 4
   └─ :scheme: 'file' (no authority component)
   └─ Host: 'file-server.local' (forbidden)
📍 Sending third request with data scheme and Host header
✅ Third HEADERS frame with data + Host sent on stream 8
   └─ :scheme: 'data' (no authority component)
   └─ Host: 'data-processor.com' (forbidden)
📍 Sending fourth request with tel scheme and Host header
✅ Fourth HEADERS frame with tel + Host sent on stream 12
   └─ :scheme: 'tel' (no authority component)
   └─ Host: 'telecom-gateway.net' (forbidden)
📍 Sending fifth request with urn scheme and Host header
✅ Fifth HEADERS frame with urn + Host sent on stream 16
   └─ :scheme: 'urn' (no authority component)
   └─ Host: 'urn-resolver.org' (forbidden)
📍 Sending sixth request with mailto scheme and empty Host header
✅ Sixth HEADERS frame with mailto + empty Host sent on stream 20
   └─ :scheme: 'mailto' (no authority component)
   └─ Host: '' (empty and forbidden)
📍 Sending seventh request with file scheme and duplicate Host headers
✅ Seventh HEADERS frame with file + duplicate Host sent on stream 24
   └─ :scheme: 'file' (no authority component)
   └─ Host: 'fileserver1.local' + 'fileserver2.local' (duplicate and forbidden)
📍 Sending eighth request with data scheme, Host header, and :authority
✅ Eighth HEADERS frame with data + Host + :authority sent on stream 28
   └─ :scheme: 'data' (no authority component)
   └─ :authority: 'data-authority.com' (forbidden)
   └─ Host: 'data-host.com' (forbidden)
📍 Sending DATA frames with request bodies
✅ First DATA frame sent on stream 0
✅ Second DATA frame sent on stream 4
✅ Third DATA frame sent on stream 8
✅ Fourth DATA frame sent on stream 12
✅ Fifth DATA frame sent on stream 16
✅ Sixth DATA frame sent on stream 20
✅ Seventh DATA frame sent on stream 24
✅ Eighth DATA frame sent on stream 28

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #34 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Mailto With Host Sent
   ✅ PASS File With Host Sent
   ✅ PASS Data With Host Sent
   ✅ PASS Tel With Host Sent
   ✅ PASS Urn With Host Sent
   ✅ PASS Empty Host Non Authority Scheme Sent
   ✅ PASS Duplicate Host Non Authority Scheme Sent
   ✅ PASS Both Host Authority Non Authority Scheme Sent
   ✅ PASS Request Body 1 Sent
   ✅ PASS Request Body 2 Sent
   ✅ PASS Request Body 3 Sent
   ✅ PASS Request Body 4 Sent
   ✅ PASS Request Body 5 Sent
   ✅ PASS Request Body 6 Sent
   ✅ PASS Request Body 7 Sent
   ✅ PASS Request Body 8 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Requests sent with Host header for non-authority schemes (protocol violation)
   • Non-authority schemes MUST NOT contain Host header field
   • Tested schemes: mailto, file, data, tel, urn (all non-authority)
   • Host header is companion to :authority; both forbidden for non-authority schemes
   • Scheme-host consistency is critical for proper HTTP/3 semantics
   • Tested variations: normal Host, empty Host, duplicate Host, Host+:authority
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 20/20 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #36: test_connect_request_with_scheme.py
============================================================
Status: PASSED
Execution Time: 3.26s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #36
======================================================================
📋 Test: CONNECT request with :scheme pseudo-header
🚫 Violation: CONNECT requests MUST NOT include :scheme pseudo-header
📚 RFC Section: HTTP/3 CONNECT Method Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending CONNECT request with :scheme pseudo-header
🚫 PROTOCOL VIOLATION: CONNECT requests MUST NOT include :scheme!
🚫 Expected error: Connection termination or header rejection
✅ CONNECT request with :scheme sent on stream 0
   └─ Headers: 5 header fields
   └─ :method: 'CONNECT'
   └─ :authority: 'example.com:443' (required)
   └─ :scheme: 'https' (forbidden)
   └─ This violates HTTP/3 CONNECT method requirements!
📍 Sending second CONNECT request with http scheme
✅ Second CONNECT request with http scheme sent on stream 4
   └─ :scheme: 'http' (forbidden)
📍 Sending third CONNECT request with ws scheme
✅ Third CONNECT request with ws scheme sent on stream 8
   └─ :scheme: 'ws' (forbidden)
   └─ :protocol: 'websocket' (valid for extended CONNECT)
📍 Sending fourth CONNECT request with invalid scheme
✅ Fourth CONNECT request with ssh scheme sent on stream 12
   └─ :scheme: 'ssh' (forbidden and invalid)
📍 Sending fifth CONNECT request with empty scheme
✅ Fifth CONNECT request with empty scheme sent on stream 16
   └─ :scheme: '' (empty and forbidden)
📍 Sending sixth CONNECT request with duplicate schemes
✅ Sixth CONNECT request with duplicate schemes sent on stream 20
   └─ :scheme: 'https' + 'http' (duplicate and forbidden)
📍 Sending seventh CONNECT request with :scheme and :path
✅ Seventh CONNECT request with :scheme and :path sent on stream 24
   └─ :scheme: 'https' (forbidden)
   └─ :path: '/tunnel' (also forbidden in CONNECT)
📍 Sending DATA frames for tunnel establishment
✅ First tunnel DATA frame sent on stream 0
✅ Second tunnel DATA frame sent on stream 4
✅ Third tunnel DATA frame sent on stream 8
✅ Fourth tunnel DATA frame sent on stream 12
✅ Fifth tunnel DATA frame sent on stream 16
✅ Sixth tunnel DATA frame sent on stream 20
✅ Seventh tunnel DATA frame sent on stream 24

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #36 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Connect With Scheme Sent
   ✅ PASS Connect With Http Scheme Sent
   ✅ PASS Connect With Ws Scheme Sent
   ✅ PASS Connect With Ssh Scheme Sent
   ✅ PASS Connect With Empty Scheme Sent
   ✅ PASS Connect With Duplicate Schemes Sent
   ✅ PASS Connect With Scheme And Path Sent
   ✅ PASS Tunnel Data 1 Sent
   ✅ PASS Tunnel Data 2 Sent
   ✅ PASS Tunnel Data 3 Sent
   ✅ PASS Tunnel Data 4 Sent
   ✅ PASS Tunnel Data 5 Sent
   ✅ PASS Tunnel Data 6 Sent
   ✅ PASS Tunnel Data 7 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • CONNECT requests sent with forbidden :scheme pseudo-header (protocol violation)
   • CONNECT method MUST NOT include :scheme pseudo-header field
   • CONNECT is for tunneling; :scheme is for resource identification
   • Tested variations: https, http, ws, ssh, empty, duplicate schemes
   • Also tested combination with :path (separate CONNECT violation)
   • CONNECT requests should only have :method and :authority pseudo-headers
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 18/18 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #37: test_connect_request_with_path.py
============================================================
Status: PASSED
Execution Time: 3.23s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #37
======================================================================
📋 Test: CONNECT request with :path pseudo-header
🚫 Violation: CONNECT requests MUST NOT include :path pseudo-header
📚 RFC Section: HTTP/3 CONNECT Method Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending CONNECT request with :path pseudo-header
🚫 PROTOCOL VIOLATION: CONNECT requests MUST NOT include :path!
🚫 Expected error: Connection termination or header rejection
✅ CONNECT request with :path sent on stream 0
   └─ Headers: 5 header fields
   └─ :method: 'CONNECT'
   └─ :authority: 'example.com:443' (required)
   └─ :path: '/tunnel' (forbidden)
   └─ This violates HTTP/3 CONNECT method requirements!
📍 Sending second CONNECT request with root path
✅ Second CONNECT request with root path sent on stream 4
   └─ :path: '/' (forbidden)
📍 Sending third CONNECT request with query parameters
✅ Third CONNECT request with query path sent on stream 8
   └─ :path: '/connect?target=backend&port=5432' (forbidden)
📍 Sending fourth CONNECT request with fragment
✅ Fourth CONNECT request with fragment path sent on stream 12
   └─ :path: '/ws#connection' (forbidden)
📍 Sending fifth CONNECT request with empty path
✅ Fifth CONNECT request with empty path sent on stream 16
   └─ :path: '' (empty and forbidden)
📍 Sending sixth CONNECT request with duplicate paths
✅ Sixth CONNECT request with duplicate paths sent on stream 20
   └─ :path: '/tunnel1' + '/tunnel2' (duplicate and forbidden)
📍 Sending seventh CONNECT request with absolute URI path
✅ Seventh CONNECT request with absolute URI path sent on stream 24
   └─ :path: 'https://target.example.com:443/resource' (forbidden)
📍 Sending eighth CONNECT request with :path and :scheme
✅ Eighth CONNECT request with :path and :scheme sent on stream 28
   └─ :path: '/secure-tunnel' (forbidden)
   └─ :scheme: 'https' (also forbidden in CONNECT)
📍 Sending DATA frames for tunnel establishment
✅ First tunnel DATA frame sent on stream 0
✅ Second tunnel DATA frame sent on stream 4
✅ Third tunnel DATA frame sent on stream 8
✅ Fourth tunnel DATA frame sent on stream 12
✅ Fifth tunnel DATA frame sent on stream 16
✅ Sixth tunnel DATA frame sent on stream 20
✅ Seventh tunnel DATA frame sent on stream 24
✅ Eighth tunnel DATA frame sent on stream 28

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #37 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Connect With Path Sent
   ✅ PASS Connect With Root Path Sent
   ✅ PASS Connect With Query Path Sent
   ✅ PASS Connect With Fragment Path Sent
   ✅ PASS Connect With Empty Path Sent
   ✅ PASS Connect With Duplicate Paths Sent
   ✅ PASS Connect With Absolute Path Sent
   ✅ PASS Connect With Path And Scheme Sent
   ✅ PASS Tunnel Data 1 Sent
   ✅ PASS Tunnel Data 2 Sent
   ✅ PASS Tunnel Data 3 Sent
   ✅ PASS Tunnel Data 4 Sent
   ✅ PASS Tunnel Data 5 Sent
   ✅ PASS Tunnel Data 6 Sent
   ✅ PASS Tunnel Data 7 Sent
   ✅ PASS Tunnel Data 8 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • CONNECT requests sent with forbidden :path pseudo-header (protocol violation)
   • CONNECT method MUST NOT include :path pseudo-header field
   • CONNECT is for tunneling; :path is for resource identification
   • Tested variations: normal path, root, query, fragment, empty, duplicate, absolute URI
   • Also tested combination with :scheme (separate CONNECT violation)
   • CONNECT requests should only have :method and :authority pseudo-headers
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 20/20 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #38: test_connect_request_without_authority.py
============================================================
Status: PASSED
Execution Time: 3.21s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #38
======================================================================
📋 Test: CONNECT request without :authority pseudo-header
🚫 Violation: CONNECT requests MUST include :authority pseudo-header
📚 RFC Section: HTTP/3 CONNECT Method Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending CONNECT request without :authority pseudo-header
🚫 PROTOCOL VIOLATION: CONNECT requests MUST include :authority!
🚫 Expected error: Connection termination or header rejection
✅ CONNECT request without :authority sent on stream 0
   └─ Headers: 3 header fields
   └─ :method: 'CONNECT'
   └─ :authority: MISSING (required)
   └─ This violates HTTP/3 CONNECT method requirements!
📍 Sending second CONNECT request with empty :authority
✅ Second CONNECT request with empty :authority sent on stream 4
   └─ :authority: '' (empty, effectively missing)
📍 Sending third CONNECT request with forbidden headers but no :authority
✅ Third CONNECT request with forbidden headers but no :authority sent on stream 8
   └─ :scheme: 'https' (forbidden)
   └─ :path: '/tunnel' (forbidden)
   └─ :authority: MISSING (required)
📍 Sending fourth CONNECT request with Host header but no :authority
✅ Fourth CONNECT request with Host but no :authority sent on stream 12
   └─ Host: 'example.com:443' (not equivalent to :authority for CONNECT)
   └─ :authority: MISSING (required)
📍 Sending fifth CONNECT request with whitespace-only :authority
✅ Fifth CONNECT request with whitespace :authority sent on stream 16
   └─ :authority: '   ' (whitespace-only, effectively missing)
📍 Sending sixth CONNECT request with malformed :authority
✅ Sixth CONNECT request with malformed :authority sent on stream 20
   └─ :authority: 'not-a-valid-host:port' (malformed)
📍 Sending seventh CONNECT request with only :method
✅ Seventh CONNECT request with only :method sent on stream 24
   └─ Headers: Only :method, no :authority
📍 Sending eighth CONNECT request with invalid :authority format
✅ Eighth CONNECT request with invalid :authority format sent on stream 28
   └─ :authority: 'just-hostname-no-port' (missing port)
📍 Sending DATA frames for tunnel establishment
✅ First tunnel DATA frame sent on stream 0
✅ Second tunnel DATA frame sent on stream 4
✅ Third tunnel DATA frame sent on stream 8
✅ Fourth tunnel DATA frame sent on stream 12
✅ Fifth tunnel DATA frame sent on stream 16
✅ Sixth tunnel DATA frame sent on stream 20
✅ Seventh tunnel DATA frame sent on stream 24
✅ Eighth tunnel DATA frame sent on stream 28

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #38 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Connect Without Authority Sent
   ✅ PASS Connect With Empty Authority Sent
   ✅ PASS Connect Forbidden Headers No Authority Sent
   ✅ PASS Connect Host Header No Authority Sent
   ✅ PASS Connect Whitespace Authority Sent
   ✅ PASS Connect Malformed Authority Sent
   ✅ PASS Connect Only Method Sent
   ✅ PASS Connect Invalid Authority Format Sent
   ✅ PASS Tunnel Data 1 Sent
   ✅ PASS Tunnel Data 2 Sent
   ✅ PASS Tunnel Data 3 Sent
   ✅ PASS Tunnel Data 4 Sent
   ✅ PASS Tunnel Data 5 Sent
   ✅ PASS Tunnel Data 6 Sent
   ✅ PASS Tunnel Data 7 Sent
   ✅ PASS Tunnel Data 8 Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • CONNECT requests sent without required :authority pseudo-header (protocol violation)
   • CONNECT method MUST include :authority pseudo-header field
   • Authority specifies tunnel destination; without it, tunnel cannot be established
   • Tested variations: missing, empty, whitespace, malformed, invalid format
   • Host header cannot substitute for :authority in CONNECT requests
   • CONNECT requires exactly :method and :authority pseudo-headers
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 20/20 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #39: test_push_stream_without_max_push_id.py
============================================================
Status: PASSED
Execution Time: 5.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #39
======================================================================
📋 Test: Push stream without MAX_PUSH_ID frame
🚫 Violation: Server MUST NOT push when client hasn't sent MAX_PUSH_ID
📚 RFC Section: HTTP/3 Server Push Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Deliberately NOT sending MAX_PUSH_ID frame
🚫 CLIENT BEHAVIOR: No MAX_PUSH_ID sent - server push should be disabled
🚫 Expected: Server MUST NOT initiate any push streams
✅ MAX_PUSH_ID frame deliberately omitted
   └─ Server push should be disabled
   └─ Any server push attempt would violate HTTP/3 specification
📍 Sending requests that typically trigger server push
✅ HTML request sent on stream 0
   └─ Path: /index.html
   └─ This might typically trigger server push for CSS/JS/images
   └─ Server MUST NOT push since no MAX_PUSH_ID was sent
📍 Sending second request for resource-heavy page
✅ Resource-heavy request sent on stream 4
   └─ Path: /dashboard
   └─ Typically has many sub-resources
📍 Sending third request with explicit push hints
✅ Push hint request sent on stream 8
   └─ Path: /app
   └─ Contains headers that might encourage push
📍 Sending fourth request simulating SPA
✅ SPA request sent on stream 12
   └─ Path: /spa
   └─ SPAs often benefit from aggressive server push
📍 Sending fifth request with Link preload headers
✅ Preload request sent on stream 16
   └─ Path: /preload-test
   └─ Contains explicit preload hints
📍 Sending sixth request with cache optimization headers
✅ Cache optimization request sent on stream 20
   └─ Path: /optimized
   └─ Headers suggest cache optimization via push
📍 Observing server behavior for push stream attempts
⏱️  Waiting for potential server response and push attempts...
✅ Observation period completed
   └─ Any server push attempts during this period would be violations
   └─ Server should have processed requests without pushing resources
📍 Sending final request to confirm connection state
✅ Final request sent on stream 24
   └─ Connection should still be active
   └─ No push streams should have been initiated

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #39 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Max Push Id Deliberately Omitted
   ✅ PASS Request Stream Created
   ✅ PASS Html Request Sent
   ✅ PASS Resource Heavy Request Sent
   ✅ PASS Push Hint Request Sent
   ✅ PASS Spa Request Sent
   ✅ PASS Preload Request Sent
   ✅ PASS Cache Opt Request Sent
   ✅ PASS Observation Period Completed
   ✅ PASS Final Request Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed
   • Client deliberately did NOT send MAX_PUSH_ID frame
   • Multiple requests sent that typically trigger server push
   • Server MUST NOT initiate push streams without MAX_PUSH_ID
   • Any push stream attempts would violate HTTP/3 specification
   • Expected behavior: Server processes requests normally, no push
   • Violation check: Monitor for H3_ID_ERROR if server attempts push
   • Test validates server compliance with MAX_PUSH_ID requirement

📊 Summary: 13/13 steps passed in 5.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #40: test_push_id_exceeds_max_push_id.py
============================================================
Status: PASSED
Execution Time: 6.21s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #40
======================================================================
📋 Test: Push ID exceeds MAX_PUSH_ID limit
🚫 Violation: Server MUST NOT use push IDs greater than client's MAX_PUSH_ID
📚 RFC Section: HTTP/3 Server Push ID Management
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Sending MAX_PUSH_ID frame with limit = 3
🔒 CLIENT LIMIT: Server can only use push IDs 0, 1, 2, 3
🚫 Expected: Server MUST NOT use push IDs 4, 5, 6, etc.
✅ MAX_PUSH_ID frame sent with limit = 3
   └─ Server can use push IDs: 0, 1, 2, 3
   └─ Push IDs 4+ would violate the limit
📍 Sending multiple requests to encourage server push
✅ Request 1 sent on stream 0 (/main.html)
   └─ This might trigger push for: CSS, JS, images, fonts
✅ Request 2 sent on stream 4 (/dashboard.html)
   └─ This might trigger push for many resources (10+ expected)
✅ Request 3 sent on stream 8 (/app.html)
   └─ This might trigger push for multiple modules
✅ Request 4 sent on stream 12 (/gallery.html)
   └─ This might trigger push for 20+ media resources
✅ Request 5 sent on stream 16 (/product.html)
   └─ This might trigger push for product and related resources
✅ Request 6 sent on stream 20 (/docs.html)
   └─ This might trigger push for documentation assets
📍 Sending additional requests to maximize push attempts
✅ Request 7 sent on stream 24 (/page7.html)
✅ Request 8 sent on stream 28 (/page8.html)
✅ Request 9 sent on stream 32 (/page9.html)
✅ Request 10 sent on stream 36 (/page10.html)
✅ Request 11 sent on stream 40 (/page11.html)
📍 Observing server push behavior
⏱️  Monitoring for push IDs > 3 (violation)
✅  Valid push IDs: 0, 1, 2, 3
🚫  Invalid push IDs: 4, 5, 6, 7, 8, ...
✅ Observation period completed
   └─ Any push attempts with ID > 3 would be violations
   └─ Server should have respected MAX_PUSH_ID limit
📍 Sending final status request
✅ Final status request sent on stream 44
   └─ Connection should still be active
   └─ No H3_ID_ERROR should have occurred

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #40 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Max Push Id Sent
   ✅ PASS Request Stream Created
   ✅ PASS Request 1 Sent
   ✅ PASS Request 2 Sent
   ✅ PASS Request 3 Sent
   ✅ PASS Request 4 Sent
   ✅ PASS Request 5 Sent
   ✅ PASS Request 6 Sent
   ✅ PASS Request 7 Sent
   ✅ PASS Request 8 Sent
   ✅ PASS Request 9 Sent
   ✅ PASS Request 10 Sent
   ✅ PASS Request 11 Sent
   ✅ PASS Observation Period Completed
   ✅ PASS Final Status Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed
   • Client sent MAX_PUSH_ID = 3 (allows push IDs 0-3)
   • Multiple resource-intensive requests sent to trigger push
   • Server MUST NOT use push IDs > 3
   • Push ID violations should trigger H3_ID_ERROR
   • Expected: Server respects push ID limit or doesn't push
   • Violation: Server uses push IDs 4, 5, 6, etc.
   • Test validates server compliance with MAX_PUSH_ID limits

📊 Summary: 18/18 steps passed in 6.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #41: test_goaway_increasing_identifiers.py
============================================================
Status: PASSED
Execution Time: 6.21s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #41
======================================================================
📋 Test: GOAWAY frames with increasing identifiers
🚫 Violation: GOAWAY frame identifiers MUST NOT increase across multiple frames
📚 RFC Section: HTTP/3 GOAWAY Frame Requirements
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating initial requests to establish stream IDs
✅ Request 1 sent on stream 0
✅ Request 2 sent on stream 4
✅ Request 3 sent on stream 8
✅ Request 4 sent on stream 12
✅ Request 5 sent on stream 16
✅ Created 5 initial request streams
   └─ Stream IDs: [0, 4, 8, 12, 16]
📍 Sending first GOAWAY frame with ID = 4
🔒 FIRST GOAWAY: Stream ID 4
✅ First GOAWAY frame sent with stream ID = 4
   └─ This indicates graceful shutdown starting from stream 4
   └─ Streams 4 and below should not process new requests
📍 Brief pause to simulate processing...
📍 Sending second GOAWAY frame with ID = 12
🚫 PROTOCOL VIOLATION: Second GOAWAY ID > First GOAWAY ID!
🚫 First GOAWAY: 4, Second GOAWAY: 12
🚫 Expected error: Connection termination or protocol error
✅ Second GOAWAY frame sent with stream ID = 12
   └─ This violates HTTP/3 GOAWAY identifier requirements!
   └─ Stream ID 12 > 4 (previous GOAWAY)
   └─ This could confuse clients about which streams to retry
📍 Sending third GOAWAY frame with even higher ID
🚫 ESCALATING VIOLATION: Third GOAWAY ID = 20
🚫 Sequence: 4 → 12 → 20
✅ Third GOAWAY frame sent with stream ID = 20
   └─ This further violates GOAWAY identifier ordering
📍 Sending fourth GOAWAY frame with correctly decreasing ID
✅ CONFORMANT GOAWAY: Fourth GOAWAY ID = 0
✅ This correctly decreases: 20 → 0
✅ Fourth GOAWAY frame sent with stream ID = 0
   └─ This follows correct GOAWAY identifier ordering
   └─ Shows what conformant behavior should look like
📍 Attempting to send requests after GOAWAY frames
✅ Post-GOAWAY request 1 sent on stream 20
✅ Post-GOAWAY request 2 sent on stream 24
✅ Post-GOAWAY request 3 sent on stream 28
📍 Sending fifth GOAWAY frame with extreme ID violation
🚫 EXTREME VIOLATION: Fifth GOAWAY ID = 1016
🚫 This is much higher than any previous ID
✅ Extreme GOAWAY frame sent with stream ID = 1016
   └─ This represents a severe GOAWAY ordering violation
📍 Observing connection behavior after GOAWAY violations
📍 Sending final request to test connection state
✅ Final request sent on stream 32
   └─ Connection may still be active despite GOAWAY violations

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #41 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Initial Requests Sent
   ✅ PASS First Goaway Sent
   ✅ PASS Second Goaway Sent
   ✅ PASS Third Goaway Sent
   ✅ PASS Fourth Goaway Sent
   ✅ PASS Post Goaway Request 1 Sent
   ✅ PASS Post Goaway Request 2 Sent
   ✅ PASS Post Goaway Request 3 Sent
   ✅ PASS Extreme Goaway Sent
   ✅ PASS Final Request Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed
   • Multiple GOAWAY frames sent with increasing identifiers (protocol violation)
   • GOAWAY sequence: 4 → 12 → 20 → 0 → 1016
   • Violations: Second, third, and extreme GOAWAY IDs were higher than previous
   • Conformant: Fourth GOAWAY ID correctly decreased
   • GOAWAY identifiers MUST NOT increase to avoid client retry confusion
   • Increasing GOAWAY IDs can cause clients to retry already-processed requests
   • Test validates server handling of malformed GOAWAY sequences

📊 Summary: 14/14 steps passed in 6.03s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #45: test_unknown_stream_type.py
============================================================
Status: PASSED
Execution Time: 5.27s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #45
======================================================================
📋 Test: Unknown unidirectional stream type
🚫 Violation: Client opens unknown stream type, server should abort or discard
📚 RFC Section: HTTP/3 Stream Type Handling
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating unknown unidirectional stream
✅ Unknown stream type 0xcc created on stream 26
📍 Sending data on unknown stream
✅ Data sent on unknown stream: 41 bytes
📍 Observing server behavior...
📍 Testing connection state
✅ Connection still active - normal request sent

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #45 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Unknown Stream Created
   ✅ PASS Data Sent
   ✅ PASS Request Stream Created
   ✅ PASS Connection Still Active

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed
   • Unknown stream type 0xcc sent
   • Server should abort reading or discard data
   • Connection should remain active (not connection error)

📊 Summary: 7/7 steps passed in 5.04s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #46: test_second_control_stream.py
============================================================
Status: PASSED
Execution Time: 3.26s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #46
======================================================================
📋 Test: Second control stream
🚫 Violation: Opening second control stream triggers H3_STREAM_CREATION_ERROR
📚 RFC Section: Only one control stream per peer is permitted
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating second control stream
🚫 PROTOCOL VIOLATION: Second control stream is not permitted!
🚫 Expected error: H3_STREAM_CREATION_ERROR (0x103)
✅ Second control stream created on stream 26
   └─ First control stream: 14
   └─ Second control stream: 26
   └─ This violates the one control stream per peer rule!
📍 Sending SETTINGS frame on second control stream
✅ SETTINGS frame sent on second control stream

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #46 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Second Control Stream Created
   ✅ PASS Second Control Stream Settings Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Second control stream opened (protocol violation)
   • Only one control stream per peer is permitted
   • Should trigger H3_STREAM_CREATION_ERROR connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #48: test_client_push_stream.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #48
======================================================================
📋 Test: Client-initiated push stream
🚫 Violation: Client opening push stream triggers H3_STREAM_CREATION_ERROR
📚 RFC Section: Only servers can push
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating client-initiated push stream
🚫 PROTOCOL VIOLATION: Only servers can push!
🚫 Expected error: H3_STREAM_CREATION_ERROR (0x103)
✅ Push stream created with ID 26
✅ Push stream type (0x01) sent on stream 26
✅ Push ID 0 sent on push stream
   └─ This violates the server-only push rule!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #48 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Push Stream Created
   ✅ PASS Push Stream Type Sent
   ✅ PASS Push Id Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Client-initiated push stream opened (protocol violation)
   • Only servers are allowed to push
   • Should trigger H3_STREAM_CREATION_ERROR connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #50: test_data_frame_on_control_stream.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #50
======================================================================
📋 Test: DATA frame on control stream
🚫 Violation: DATA frame on control stream triggers H3_FRAME_UNEXPECTED
📚 RFC Section: DATA frames MUST be associated with HTTP request or response
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Sending DATA frame on control stream
🚫 PROTOCOL VIOLATION: DATA frames not allowed on control stream!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
❌ Failed to send DATA frame: DATA frame is not allowed in this state
   └─ This may indicate the violation was caught early

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #50 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Data Frame On Control Stream Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • DATA frame sending failed: DATA frame is not allowed in this state
   • DATA frame sent on control stream (protocol violation)
   • DATA frames MUST be associated with HTTP request or response
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 4/4 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #52: test_headers_frame_on_control_stream.py
============================================================
Status: PASSED
Execution Time: 3.21s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #52
======================================================================
📋 Test: HEADERS frame on control stream
🚫 Violation: HEADERS frame on control stream triggers H3_FRAME_UNEXPECTED
📚 RFC Section: HEADERS frames can only be sent on request streams or push streams
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Sending HEADERS frame on control stream
🚫 PROTOCOL VIOLATION: HEADERS frames not allowed on control stream!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ HEADERS frame sent on control stream 14
   └─ Headers: 6 header fields
   └─ This violates HTTP/3 frame usage rules!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #52 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Headers Frame On Control Stream Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • HEADERS frame sent on control stream (protocol violation)
   • HEADERS frames can only be sent on request streams or push streams
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 4/4 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #54: test_cancel_push_on_request_stream.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #54
======================================================================
📋 Test: CANCEL_PUSH frame on request stream
🚫 Violation: CANCEL_PUSH frame on request stream triggers H3_FRAME_UNEXPECTED
📚 RFC Section: CANCEL_PUSH frame is sent on the control stream
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending initial HEADERS frame
✅ Initial HEADERS frame sent on stream 0
📍 Sending CANCEL_PUSH frame on request stream
🚫 PROTOCOL VIOLATION: CANCEL_PUSH frames should only be on control stream!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ CANCEL_PUSH frame sent on request stream 0
   └─ Push ID: 0
   └─ This violates HTTP/3 frame usage rules!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #54 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Initial Headers Sent
   ✅ PASS Cancel Push On Request Stream Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • CANCEL_PUSH frame sent on request stream (protocol violation)
   • CANCEL_PUSH frames should only be sent on control stream
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #56: test_cancel_push_invalid_id.py
============================================================
Status: PASSED
Execution Time: 3.21s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #56
======================================================================
📋 Test: CANCEL_PUSH frame with invalid push ID
🚫 Violation: CANCEL_PUSH with invalid push ID triggers H3_ID_ERROR
📚 RFC Section: CANCEL_PUSH must reference valid push ID
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Sending CANCEL_PUSH frame with invalid push ID
🚫 PROTOCOL VIOLATION: Push ID exceeds allowed range!
🚫 Expected error: H3_ID_ERROR (0x108)
✅ CANCEL_PUSH frame sent on control stream 14
   └─ Invalid Push ID: 5
   └─ Server has not established MAX_PUSH_ID ≥ 5
   └─ This violates push ID range constraints!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #56 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Cancel Push Invalid Id Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • CANCEL_PUSH frame with invalid push ID 5 (protocol violation)
   • Push ID exceeds currently allowed range
   • Should trigger H3_ID_ERROR connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 4/4 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #58: test_cancel_push_unannounced_id.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #58
======================================================================
📋 Test: CANCEL_PUSH frame for unannounced push ID
🚫 Violation: CANCEL_PUSH for unannounced push ID triggers H3_ID_ERROR
📚 RFC Section: CANCEL_PUSH must reference push ID announced by PUSH_PROMISE
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Sending MAX_PUSH_ID frame to allow push operations
✅ MAX_PUSH_ID frame sent with limit 10
📍 Sending CANCEL_PUSH frame for unannounced push ID
🚫 PROTOCOL VIOLATION: Push ID never announced by PUSH_PROMISE!
🚫 Expected error: H3_ID_ERROR (0x108)
✅ CANCEL_PUSH frame sent on control stream 14
   └─ Unannounced Push ID: 3
   └─ Server never sent PUSH_PROMISE for this ID
   └─ This violates push ID announcement requirements!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #58 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Max Push Id Sent
   ✅ PASS Cancel Push Unannounced Id Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • CANCEL_PUSH frame for unannounced push ID 3 (protocol violation)
   • Push ID was never announced by server via PUSH_PROMISE
   • Should trigger H3_ID_ERROR connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #60: test_second_settings_frame.py
============================================================
Status: PASSED
Execution Time: 3.24s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #60
======================================================================
📋 Test: Second SETTINGS frame
🚫 Violation: Second SETTINGS frame triggers H3_FRAME_UNEXPECTED
📚 RFC Section: Only one SETTINGS frame allowed per control stream
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Sending second SETTINGS frame on control stream
🚫 PROTOCOL VIOLATION: Only one SETTINGS frame allowed!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ Second SETTINGS frame sent on control stream 14
   └─ This violates the one SETTINGS frame per control stream rule!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #60 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Second Settings Frame Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Second SETTINGS frame sent on control stream (protocol violation)
   • Only one SETTINGS frame is allowed per control stream
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 4/4 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #62: test_settings_on_push_stream.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #62
======================================================================
📋 Test: SETTINGS frame on push stream
🚫 Violation: SETTINGS frame on push stream triggers H3_FRAME_UNEXPECTED
📚 RFC Section: SETTINGS frames MUST NOT be sent on any stream other than control stream
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating push stream
✅ Push stream created with ID 26
📍 Sending SETTINGS frame on push stream
🚫 PROTOCOL VIOLATION: SETTINGS frames only allowed on control stream!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ SETTINGS frame sent on push stream 26
   └─ This violates SETTINGS frame placement rules!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #62 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Push Stream Created
   ✅ PASS Settings On Push Stream Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • SETTINGS frame sent on push stream (protocol violation)
   • SETTINGS frames MUST NOT be sent on any stream other than control stream
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #63: test_duplicate_settings_identifiers.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #63
======================================================================
📋 Test: Duplicate setting identifiers
🚫 Violation: Duplicate setting identifiers trigger H3_SETTINGS_ERROR
📚 RFC Section: Same setting identifier MUST NOT occur more than once
🎯 Target: localhost:4433
======================================================================
📍 Creating control stream
📍 Sending SETTINGS frame with duplicate identifiers
🚫 PROTOCOL VIOLATION: Duplicate setting identifiers!
🚫 Expected error: H3_SETTINGS_ERROR (0x109)
✅ SETTINGS frame with duplicate identifiers sent on stream 14
   └─ QPACK_MAX_TABLE_CAPACITY appears twice with different values
   └─ This violates setting identifier uniqueness!
📍 Creating QPACK streams

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #63 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Duplicate Settings Sent
   ✅ PASS Qpack Streams Created

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • SETTINGS frame with duplicate setting identifiers (protocol violation)
   • Same setting identifier MUST NOT occur more than once
   • Should trigger H3_SETTINGS_ERROR connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 4/4 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #65: test_reserved_settings_identifier.py
============================================================
Status: PASSED
Execution Time: 3.22s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #65
======================================================================
📋 Test: Reserved setting identifier
🚫 Violation: Reserved setting identifier triggers H3_SETTINGS_ERROR
📚 RFC Section: Reserved settings MUST NOT be sent by client
🎯 Target: localhost:4433
======================================================================
📍 Creating control stream
📍 Sending SETTINGS frame with reserved identifier
🚫 PROTOCOL VIOLATION: Reserved setting identifier 0x2!
🚫 Expected error: H3_SETTINGS_ERROR (0x109)
✅ SETTINGS frame with reserved identifier sent on stream 14
   └─ Reserved setting ID 0x2 (SETTINGS_ENABLE_PUSH) included
   └─ This violates reserved setting restrictions!
📍 Creating QPACK streams

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #65 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Reserved Settings Sent
   ✅ PASS Qpack Streams Created

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • SETTINGS frame with reserved setting identifier 0x2 (protocol violation)
   • Reserved settings MUST NOT be sent by client
   • Should trigger H3_SETTINGS_ERROR connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 4/4 steps passed in 3.01s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #69: test_client_push_promise.py
============================================================
Status: PASSED
Execution Time: 3.24s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #69
======================================================================
📋 Test: Client sends PUSH_PROMISE frame
🚫 Violation: Client PUSH_PROMISE triggers H3_FRAME_UNEXPECTED
📚 RFC Section: Client MUST NOT send PUSH_PROMISE frame
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending initial HEADERS frame
✅ Initial HEADERS frame sent on stream 0
📍 Sending PUSH_PROMISE frame from client
🚫 PROTOCOL VIOLATION: Clients MUST NOT send PUSH_PROMISE!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ PUSH_PROMISE frame sent on request stream 0
   └─ Push ID: 0
   └─ This violates client PUSH_PROMISE restrictions!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #69 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Initial Headers Sent
   ✅ PASS Push Promise Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • PUSH_PROMISE frame sent by client (protocol violation)
   • Client MUST NOT send PUSH_PROMISE frame
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #71: test_goaway_on_request_stream.py
============================================================
Status: PASSED
Execution Time: 3.28s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #71
======================================================================
📋 Test: GOAWAY frame on request stream
🚫 Violation: GOAWAY frame on request stream triggers H3_FRAME_UNEXPECTED
📚 RFC Section: GOAWAY frame must be on control stream only
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending initial HEADERS frame
✅ Initial HEADERS frame sent on stream 0
📍 Sending GOAWAY frame on request stream
🚫 PROTOCOL VIOLATION: GOAWAY frames only allowed on control stream!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ GOAWAY frame sent on request stream 0
   └─ Stream/Push ID: 0
   └─ This violates GOAWAY frame placement rules!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #71 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Initial Headers Sent
   ✅ PASS Goaway On Request Stream Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • GOAWAY frame sent on request stream (protocol violation)
   • GOAWAY frame must be on control stream only
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.03s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #72: test_max_push_id_on_push_stream.py
============================================================
Status: PASSED
Execution Time: 3.25s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #72
======================================================================
📋 Test: MAX_PUSH_ID frame on push stream
🚫 Violation: MAX_PUSH_ID frame on push stream triggers H3_FRAME_UNEXPECTED
📚 RFC Section: MAX_PUSH_ID frame is always sent on control stream
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating push stream
✅ Push stream created with ID 26
📍 Sending MAX_PUSH_ID frame on push stream
🚫 PROTOCOL VIOLATION: MAX_PUSH_ID frames only allowed on control stream!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ MAX_PUSH_ID frame sent on push stream 26
   └─ Max Push ID: 5
   └─ This violates MAX_PUSH_ID frame placement rules!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #72 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Push Stream Created
   ✅ PASS Max Push Id On Push Stream Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • MAX_PUSH_ID frame sent on push stream (protocol violation)
   • MAX_PUSH_ID frame is always sent on control stream
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #75: test_reserved_frame_type.py
============================================================
Status: PASSED
Execution Time: 3.25s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #75
======================================================================
📋 Test: Reserved frame type
🚫 Violation: Reserved frame type triggers H3_FRAME_UNEXPECTED
📚 RFC Section: Reserved frame types MUST NOT be sent by client
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending initial HEADERS frame
✅ Initial HEADERS frame sent on stream 0
📍 Sending reserved frame type on request stream
🚫 PROTOCOL VIOLATION: Reserved frame type 0x4!
🚫 Expected error: H3_FRAME_UNEXPECTED (0x105)
✅ Reserved frame type 0x4 sent on request stream 0
   └─ This violates reserved frame type restrictions!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #75 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Initial Headers Sent
   ✅ PASS Reserved Frame Type Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Reserved frame type 0x4 sent on request stream (protocol violation)
   • Reserved frame types MUST NOT be sent by client
   • Should trigger H3_FRAME_UNEXPECTED connection error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 6/6 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #77: test_forbidden_header_characters.py
============================================================
Status: PASSED
Execution Time: 3.27s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #77
======================================================================
📋 Test: Forbidden characters in header values
🚫 Violation: Forbidden header characters trigger malformed request
📚 RFC Section: Characters not permitted in field value MUST be treated as malformed
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with forbidden characters
🚫 PROTOCOL VIOLATION: Carriage return in header value!
🚫 Expected: Malformed request error
✅ HEADERS frame with forbidden characters sent on stream 0
   └─ Header 'x-custom' contains carriage return (0x0d)
   └─ This violates header value character restrictions!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #77 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Forbidden Header Characters Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Header value with forbidden carriage return character (protocol violation)
   • Characters not permitted in field value MUST be treated as malformed
   • Should trigger malformed request error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #78: test_linefeed_header_characters.py
============================================================
Status: PASSED
Execution Time: 3.25s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #78
======================================================================
📋 Test: Line feed characters in header values
🚫 Violation: Line feed header characters trigger malformed request
📚 RFC Section: Characters not permitted in field value MUST be treated as malformed
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with line feed characters
🚫 PROTOCOL VIOLATION: Line feed in header value!
🚫 Expected: Malformed request error
✅ HEADERS frame with line feed characters sent on stream 0
   └─ Header 'x-info' contains line feed (0x0a)
   └─ This violates header value character restrictions!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #78 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Linefeed Header Characters Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Header value with forbidden line feed character (protocol violation)
   • Characters not permitted in field value MUST be treated as malformed
   • Should trigger malformed request error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.02s
======================================================================

------------------------------------------------------------

============================================================
TEST CASE #79: test_null_header_characters.py
============================================================
Status: PASSED
Execution Time: 3.23s

STDOUT:
------------------------------
======================================================================
🧪 NON-CONFORMANCE TEST CASE #79
======================================================================
📋 Test: Null characters in header values
🚫 Violation: Null header characters trigger malformed request
📚 RFC Section: Characters not permitted in field value MUST be treated as malformed
🎯 Target: localhost:4433
======================================================================
📍 Setting up conformant HTTP/3 connection
✅ HTTP/3 connection established (control: 14)
📍 Creating request stream
📍 Sending HEADERS frame with null characters
🚫 PROTOCOL VIOLATION: Null character in header value!
🚫 Expected: Malformed request error
✅ HEADERS frame with null characters sent on stream 0
   └─ Header 'x-user' contains null character (0x00)
   └─ This violates header value character restrictions!

📍 Observing server behavior (3.0s)

======================================================================
📊 TEST CASE #79 RESULTS
======================================================================
🧪 Test Execution:
   ✅ PASS Connection Established
   ✅ PASS Control Stream Created
   ✅ PASS Qpack Streams Created
   ✅ PASS Request Stream Created
   ✅ PASS Null Header Characters Sent

🔌 Connection Terminated: H3_STREAM_CREATION_ERROR
   Reason: Only one QPACK encoder stream is allowed

📝 Key Observations:
   • Header value with forbidden null character (protocol violation)
   • Characters not permitted in field value MUST be treated as malformed
   • Should trigger malformed request error
   • Connection terminated: H3_STREAM_CREATION_ERROR - Only one QPACK encoder stream is allowed

📊 Summary: 5/5 steps passed in 3.02s
======================================================================

------------------------------------------------------------
